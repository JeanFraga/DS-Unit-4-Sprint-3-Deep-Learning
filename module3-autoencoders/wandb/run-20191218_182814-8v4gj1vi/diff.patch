diff --git a/module3-autoencoders/LS_DS_433_Autoencoders_Lecture.ipynb b/module3-autoencoders/LS_DS_433_Autoencoders_Lecture.ipynb
index 57ceaa0..3560a06 100644
--- a/module3-autoencoders/LS_DS_433_Autoencoders_Lecture.ipynb
+++ b/module3-autoencoders/LS_DS_433_Autoencoders_Lecture.ipynb
@@ -82,7 +82,32 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 119,
+   "execution_count": 6,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Note: you may need to restart the kernel to use updated packages.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "ERROR: unknown command \"wandb\"\n",
+      "\n"
+     ]
+    }
+   ],
+   "source": [
+    "# pip wandb login 358ce2801e640a67df828839c179d15370f0f4aa"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -95,40 +120,47 @@
     "encoding_dim = 32  # 32 floats -> compression of factor 24.5, assuming the input is 784 floats\n",
     "\n",
     "# this is our input placeholder\n",
+    "input_img = Input(shape=(784,))\n",
     "\n",
     "# \"encoded\" is the encoded representation of the input\n",
+    "encoded = Dense(encoding_dim, activation='relu')(input_img)\n",
     "\n",
     "# \"decoded\" is the lossy reconstruction of the input\n",
+    "decoded = Dense(784, activation='sigmoid')(encoded)\n",
     "\n",
-    "\n",
-    "# this model maps an input to its reconstruction\n"
+    "# this model maps an input to its reconstruction\n",
+    "autoencoder = Model(input_img, decoded)\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 105,
+   "execution_count": 10,
    "metadata": {},
    "outputs": [],
    "source": [
-    "# this model maps an input to its encoded representation\n"
+    "# this model maps an input to its encoded representation\n",
+    "encoder = Model(input_img, encoded)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 106,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [],
    "source": [
     "# create a placeholder for an encoded (32-dimensional) input\n",
+    "encoded_input = Input(shape=(encoding_dim,))\n",
     "\n",
     "# retrieve the last layer of the autoencoder model\n",
+    "decoder_layer = autoencoder.layers[-1]\n",
     "\n",
-    "# create the decoder model\n"
+    "# create the decoder model\n",
+    "decoder = Model(encoded_input, decoder_layer(encoded_input))"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 113,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -137,7 +169,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 108,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -148,7 +180,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 109,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [
     {
@@ -171,16 +203,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 118,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/html": [
        "\n",
-       "            Notebook configured with <a href=\"https://wandb.com\" target=\"_blank\">W&B</a>. You can <a href=\"https://app.wandb.ai/ds5/mnist_autoencoder/runs/wgvmhq5t\" target=\"_blank\">open</a> the run page, or call <code>%%wandb</code>\n",
-       "            in a cell containing your training loop to display live results.  Learn more in our <a href=\"https://docs.wandb.com/docs/integrations/jupyter.html\" target=\"_blank\">docs</a>.\n",
-       "        "
+       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/ds8/autoencoder\" target=\"_blank\">https://app.wandb.ai/ds8/autoencoder</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/ds8/autoencoder/runs/zmmh9tle\" target=\"_blank\">https://app.wandb.ai/ds8/autoencoder/runs/zmmh9tle</a><br/>\n",
+       "            "
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -189,56 +222,51 @@
      "metadata": {},
      "output_type": "display_data"
     },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "E0918 10:55:19.873255 4443284928 jupyter.py:96] Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n",
-      "W0918 10:55:20.740216 4443284928 callbacks.py:241] Method (on_train_batch_end) is slow compared to the batch update (0.870614). Check your callbacks.\n",
-      "W0918 10:55:20.748113 4443284928 callbacks.py:241] Method (on_train_batch_end) is slow compared to the batch update (0.435325). Check your callbacks.\n"
-     ]
-    },
     {
      "data": {
       "text/plain": [
-       "<tensorflow.python.keras.callbacks.History at 0x1a3e915400>"
+       "<tensorflow.python.keras.callbacks.History at 0x167685962b0>"
       ]
      },
-     "execution_count": 118,
+     "execution_count": 8,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "wandb.init(project=\"mnist_autoencoder\", entity=\"ds5\")\n",
+    "wandb.init(project=\"autoencoder\", entity=\"ds8\")\n",
     "\n",
-    "autoencoder.fit(..., ...,\n",
+    "autoencoder.fit(x_train, x_train,\n",
     "                epochs=1000,\n",
     "                batch_size=256,\n",
     "                shuffle=True,\n",
-    "                validation_data=(..., ...),\n",
+    "                validation_data=(x_test, x_test),\n",
     "                verbose = False,\n",
-    "                callbacks=...)"
+    "                callbacks=[WandbCallback()])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 101,
+   "execution_count": 11,
    "metadata": {},
    "outputs": [],
    "source": [
     "# encode and decode some digits\n",
-    "# note that we take them from the *test* set\n"
+    "# note that we take them from the *test* set\n",
+    "\n",
+    "\n",
+    "encoded_imgs = encoder.predict(x_test)\n",
+    "decoded_imgs = decoder.predict(encoded_imgs)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 102,
+   "execution_count": 12,
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 1440x288 with 20 Axes>"
       ]
@@ -316,11 +344,19 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 13,
    "metadata": {},
    "outputs": [],
    "source": [
-    "input_img = Input(shape=(784,))\n"
+    "input_img = Input(shape=(784,))\n",
+    "\n",
+    "encoded = Dense(128, activation='relu')(input_img)\n",
+    "encoded = Dense(64, activation='relu')(encoded)\n",
+    "encoded = Dense(32, activation='relu')(encoded)\n",
+    "\n",
+    "decoded = Dense(64, activation='relu')(encoded)\n",
+    "decoded = Dense(128, activation='relu')(decoded)\n",
+    "decoded = Dense(784, activation='sigmoid')(decoded)"
    ]
   },
   {
@@ -329,7 +365,16 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "# compile & fit model"
+    "# compile & fit model\n",
+    "\n",
+    "autoencoder = Model(input_img, decoded)\n",
+    "\n",
+    "autoencoder.compile(loss='binary_crossentropy',\n",
+    "                    optimizer='nadam')\n",
+    "\n",
+    "wandb.init(project=\"autoencoder\", entity='ds8')\n",
+    "\n",
+    "autoencoder.f"
    ]
   },
   {
@@ -624,9 +669,9 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "U4-S3-DNN (Python 3.7)",
+   "display_name": "Python [conda env:U4-S3-deep-learning] *",
    "language": "python",
-   "name": "u4-s3-dnn"
+   "name": "conda-env-U4-S3-deep-learning-py"
   },
   "language_info": {
    "codemirror_mode": {
@@ -638,9 +683,9 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.3"
+   "version": "3.7.0"
   }
  },
  "nbformat": 4,
- "nbformat_minor": 2
+ "nbformat_minor": 4
 }
diff --git a/module3-generative-adversarial-networks/LS_DS_443_Generative_Adversarial_Networks.ipynb b/module3-generative-adversarial-networks/LS_DS_443_Generative_Adversarial_Networks.ipynb
index 3a4fbd6..95d9776 100644
--- a/module3-generative-adversarial-networks/LS_DS_443_Generative_Adversarial_Networks.ipynb
+++ b/module3-generative-adversarial-networks/LS_DS_443_Generative_Adversarial_Networks.ipynb
@@ -131,7 +131,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 5,
    "metadata": {
     "colab": {},
     "colab_type": "code",
@@ -139,10 +139,14 @@
    },
    "outputs": [
     {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Using TensorFlow backend.\n"
+     "ename": "ModuleNotFoundError",
+     "evalue": "No module named 'tensorflow.keras.layers.core'",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+      "\u001b[1;32m<ipython-input-5-dcd80e4ebe2e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlayers\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mInput\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mModel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mSequential\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 9\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcore\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mDense\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mDropout\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     10\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madvanced_activations\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mLeakyReLU\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdatasets\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mfashion_mnist\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'tensorflow.keras.layers.core'"
      ]
     }
    ],
@@ -2416,9 +2420,9 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.3"
+   "version": "3.7.0"
   }
  },
  "nbformat": 4,
- "nbformat_minor": 2
+ "nbformat_minor": 4
 }
