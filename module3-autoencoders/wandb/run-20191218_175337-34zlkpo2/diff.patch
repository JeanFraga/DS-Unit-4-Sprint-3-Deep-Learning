diff --git a/module3-autoencoders/LS_DS_433_Autoencoders_Lecture.ipynb b/module3-autoencoders/LS_DS_433_Autoencoders_Lecture.ipynb
index 57ceaa0..eaf2c87 100644
--- a/module3-autoencoders/LS_DS_433_Autoencoders_Lecture.ipynb
+++ b/module3-autoencoders/LS_DS_433_Autoencoders_Lecture.ipynb
@@ -82,7 +82,32 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 119,
+   "execution_count": 6,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Note: you may need to restart the kernel to use updated packages.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "ERROR: unknown command \"wandb\"\n",
+      "\n"
+     ]
+    }
+   ],
+   "source": [
+    "# pip wandb login 358ce2801e640a67df828839c179d15370f0f4aa"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -95,13 +120,16 @@
     "encoding_dim = 32  # 32 floats -> compression of factor 24.5, assuming the input is 784 floats\n",
     "\n",
     "# this is our input placeholder\n",
+    "input_img = Input(shape=(784,))\n",
     "\n",
     "# \"encoded\" is the encoded representation of the input\n",
+    "encoded = Dense(encoding_dim, activation='relu')(input_img)\n",
     "\n",
     "# \"decoded\" is the lossy reconstruction of the input\n",
+    "decoded = Dense(784, activation='sigmoid')(encoded)\n",
     "\n",
-    "\n",
-    "# this model maps an input to its reconstruction\n"
+    "# this model maps an input to its reconstruction\n",
+    "autoencoder = Model(input_img, decoded)\n"
    ]
   },
   {
@@ -110,7 +138,8 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "# this model maps an input to its encoded representation\n"
+    "# this model maps an input to its encoded representation\n",
+    "encoder = Model(input_img, encoded)"
    ]
   },
   {
@@ -120,10 +149,13 @@
    "outputs": [],
    "source": [
     "# create a placeholder for an encoded (32-dimensional) input\n",
+    "encoded_input = Input(shape=(encoding_dim,))\n",
     "\n",
     "# retrieve the last layer of the autoencoder model\n",
+    "decoder_layer = autoencoder.layers[-1]\n",
     "\n",
-    "# create the decoder model\n"
+    "# create the decoder model\n",
+    "decoder = Model(encoded_input, decoder_layer(encoded_input))"
    ]
   },
   {
@@ -624,9 +656,9 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "U4-S3-DNN (Python 3.7)",
+   "display_name": "Python [conda env:U4-S3-deep-learning] *",
    "language": "python",
-   "name": "u4-s3-dnn"
+   "name": "conda-env-U4-S3-deep-learning-py"
   },
   "language_info": {
    "codemirror_mode": {
@@ -638,9 +670,9 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.3"
+   "version": "3.7.0"
   }
  },
  "nbformat": 4,
- "nbformat_minor": 2
+ "nbformat_minor": 4
 }
diff --git a/module3-generative-adversarial-networks/LS_DS_443_Generative_Adversarial_Networks.ipynb b/module3-generative-adversarial-networks/LS_DS_443_Generative_Adversarial_Networks.ipynb
index 3a4fbd6..95d9776 100644
--- a/module3-generative-adversarial-networks/LS_DS_443_Generative_Adversarial_Networks.ipynb
+++ b/module3-generative-adversarial-networks/LS_DS_443_Generative_Adversarial_Networks.ipynb
@@ -131,7 +131,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 5,
    "metadata": {
     "colab": {},
     "colab_type": "code",
@@ -139,10 +139,14 @@
    },
    "outputs": [
     {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Using TensorFlow backend.\n"
+     "ename": "ModuleNotFoundError",
+     "evalue": "No module named 'tensorflow.keras.layers.core'",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+      "\u001b[1;32m<ipython-input-5-dcd80e4ebe2e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlayers\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mInput\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mModel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mSequential\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 9\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcore\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mDense\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mDropout\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     10\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madvanced_activations\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mLeakyReLU\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdatasets\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mfashion_mnist\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'tensorflow.keras.layers.core'"
      ]
     }
    ],
@@ -2416,9 +2420,9 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.3"
+   "version": "3.7.0"
   }
  },
  "nbformat": 4,
- "nbformat_minor": 2
+ "nbformat_minor": 4
 }
